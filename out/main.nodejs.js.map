{"version":3,"file":"main.nodejs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNa;AACb,uBAAuB,SAAI,IAAI,SAAI;AACnC,6CAA6C;AAC7C;AACA,+CAA+C,aAAa;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,eAAe,8BAA8B,YAAY;AAC9I,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack/bootstrap","../webpack/runtime/make namespace object","../src/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = __importDefault(require(\"axios\"));\nconst sdk_1 = require(\"@scrypted/sdk\");\nclass WeatherStation extends sdk_1.ScryptedDeviceBase {\n    constructor(nativeId) {\n        super(nativeId);\n        // Configuration values – you can later change these to be set via Scrypted's device configuration.\n        this.stationId = 'YOUR_STATION_ID';\n        this.apiKey = 'yourApiKey';\n        // Optionally initialize any state here.\n        this.console.log('WeatherStation plugin initialized.');\n    }\n    // Method to fetch current weather observation data\n    async getWeatherObservation() {\n        const url = `https://api.weather.com/v2/pws/observations/current?stationId=${this.stationId}&format=json&units=e&apiKey=${this.apiKey}`;\n        this.console.log(`Fetching weather data from: ${url}`);\n        try {\n            const response = await axios_1.default.get(url);\n            this.console.log('Weather observation data received.');\n            return response.data;\n        }\n        catch (error) {\n            this.console.error('Failed to fetch weather data:', error);\n            throw error;\n        }\n    }\n    // Example method to trigger an automation or process the data\n    async updateWeatherStatus() {\n        try {\n            const data = await this.getWeatherObservation();\n            // Here you could process the data and update device states, trigger events, etc.\n            this.console.log(`Current Temperature: ${data.observations[0].tempF}°F`);\n            // For example, you might update a property or trigger an event:\n            // this.notifyInterface('OnOff', data.observations[0].tempF > 70);\n        }\n        catch (error) {\n            this.console.error('Error updating weather status:', error);\n        }\n    }\n}\nexports.default = WeatherStation;\n//# sourceMappingURL=main.js.map"],"names":[],"sourceRoot":""}